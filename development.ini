#
# ebetl - Pylons development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
# This file is for deployment specific config options -- other configuration
# that is always required for the app is done in the config directory,
# and generally should not be modified by end users.

[DEFAULT]
debug = true
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

[server:main]
use = egg:Paste#http
host = localhost
port = 9093

[sa_auth]
cookie_secret = 1947ea0e-8ce4-49d2-9696-3d3072fee296

[app:main]
use = egg:ebetl
full_stack = true
#lang = ru
cache_dir = %(here)s/data
beaker.session.key = ebetl
beaker.session.secret = 1947ea0e-8ce4-49d2-9696-3d3072fee296

#By default session is store in cookies to avoid the overhead
#of having to manage a session storage. On production you might
#want to switch to a better session storage.
beaker.session.type = cookie
beaker.session.validate_key = 1947ea0e-8ce4-49d2-9696-3d3072fee296

# Disable template autoreload to boost performances in production
# WARNING: if you want to deploy your application using a zipped egg
# (ie: if your application's setup.py defines zip-safe=True, then you
# MUST put "false" for the production environment because there will
# be no disk and real files to compare time with.
#auto_reload_templates = false

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions

# pick the form for your database
# %(here) may include a ':' character on Windows environments; this can
# invalidate the URI when specifying a SQLite db via path name
# sqlalchemy.url=postgres://username:password@hostname:port/databasename

#sqlalchemy.url=firebird+fdb://SYSDBA:masterkey@188.219.231.47/c:\EasyRetail\Dbase\DBRETAIL.GDB?charset=latin1
#sqlalchemy.url=firebird+fdb://SYSDBA:masterkey@localhost:3051//db/DBRETAIL.GDB?charset=latin1

# 351
sqlalchemy.url=firebird+fdb://SYSDBA:masterkey@94.138.168.96:3051/c:\EasyRetail\Dbase\DBRETAIL.GDB?charset=latin1

# 352
#sqlalchemy.url=firebird+fdb://SYSDBA:masterkey@94.138.168.4:3051/c:\EasyRetail\Dbase\DBRETAIL.GDB?charset=latin1

#sqlalchemy.url=mysql://root:satellite@localhost/lilliput_git


sqlalchemy.convert_unicode=true
#sqlalchemy.url=firebird+fdb://SYSDBA:masterkey@localhost//home/dfavara/public_html/ebetl/archive/UGOUGA.GDB
# If you have sqlite, here's a simple default to get you started
# in development

#sqlalchemy.url = sqlite:///%(here)s/devdata.db
#echo shouldn't be used together with the logging module.
#sqlalchemy.echo = true
sqlalchemy.echo_pool = false
sqlalchemy.pool_recycle = 3600

# This line ensures that Genshi will render xhtml when sending the
# output. Change to html or xml, as desired.
templating.genshi.method = xhtml
templating.genshi.doctype = html5

# the compiled template dir is a directory that must be readable by your
# webserver. It will be used to store the resulting templates once compiled
# by the TemplateLookup system.
# During development you generally don't need this option since paste's HTTP
# server will have access to you development directories, but in production
# you'll most certainly want to have apache or nginx to write in a directory
# that does not contain any source code in any form for obvious security reasons.
templating.mako.compiled_templates_dir = %(here)s/data/templates

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = false

# Logging configuration
# Add additional loggers, handlers, formatters here
# Uses python's logging config file format
# http://docs.python.org/lib/logging-config-fileformat.html

#turn this setting to "min" if you would like tw to produce minified
#javascript files (if your library supports that)
toscawidgets.framework.resource_variant=min
toscawidgets.on = True
# ======================================================= EB ETL - Configuration

starlogic.out = %(here)s/archive/Articoli.txt
starlogic.sincro = %(here)s/archive/Sincro.txt

cubes.dbretail.json = %(here)s/olap/dbretail.json


filconad_big.path_input = %(here)s/archive/input/filconad/000720/big
filconad_big.filename = *.txt
filconad_big.filename_out = filconad.csv
filconad_big.path_output = %(here)s/archive/output/filconad/000720/big
filconad_big.codice = 000720
filconad_big.notfound = 1601000000
filconad_big.rosetta = %(here)s/archive/input/filconad/000720/b2b.json

mistral.write.codmov=FACFOR,FATFOR
mistral.path_output=%(here)s/archive/output/
mistral.filename=MRMOV.txt
listini.big.path_input=%(here)s/archive/input/listini/big
listini.big.filename=listino.csv
listini.big.codice=000720
listini.big.reparto=720

filconad_bor.path_input = %(here)s/archive/input/filconad/000010/borgoglio
filconad_bor.filename = *.txt
filconad_bor.filename_out = filconad.csv
filconad_bor.path_output = %(here)s/archive/output/filconad/000010/borgoglio
filconad_bor.codice = 000010
filconad_bor.notfound = 1601000000

dbretail.movcode=FACFOR, FATFOR
dbretail.notfound=1601000000
dbretail.path_input = %(here)s/archive/input/b2b


zucchetti.path_input = %(here)s/archive/input/zucchetti/gesam
zucchetti.filename = *.D
zucchetti.filename_out = zucchetti.csv
zucchetti.path_output = %(here)s/archive/output/zucchetti
zucchetti.codice = 0
zucchetti.notfound = 0
zucchetti.rosetta = 0

	
lilliput.dburl = mysql://root:satellite@zeroisp.com/lilliput_fact

[[loggers]
keys = root, ebetl, sqlalchemy, auth, cli00

[handlers]
keys = console

[formatters]
keys = generic

# If you create additional loggers, add them as a key to [loggers]
[logger_root]
level = DEBUG
handlers = console

[logger_ebetl]
level = DEBUG
handlers = console
qualname = ebetl

[logger_sqlalchemy]
level = DEBUG
handlers = console
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

# A logger for authentication, identification and authorization
# this is repoze.who:
[logger_auth]
level = WARN
handlers =
qualname = auth

# If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

# If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
